{"ast":null,"code":"import { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, ADD_POST_TO_ME, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LIKE_BUTTON_REQUEST, LIKE_BUTTON_SUCCESS, LIKE_BUTTON_FAILURE, UNLIKE_BUTTON_REQUEST, UNLIKE_BUTTON_SUCCESS, UNLIKE_BUTTON_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE } from \"../constants/post\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentsAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComments(action) {\n  try {\n    const result = yield call(addCommentsAPI, action.data);\n    yield put({\n      type: ADD_COMMENTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_COMMENTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_HAS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likeButtonAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likeButton(action) {\n  try {\n    const result = yield call(likeButtonAPI, action.data); //result에 postid와 userid가 들어가 있음\n\n    yield put({\n      type: LIKE_BUTTON_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(\"likeerror\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LIKE_BUTTON_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikeButtonAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikeButton(action) {\n  try {\n    const result = yield call(unlikeButtonAPI, action.data);\n    yield put({\n      type: UNLIKE_BUTTON_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: UNLIKE_BUTTON_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`, data);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* warchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComments() {\n  yield takeLatest(ADD_COMMENTS_REQUEST, addComments);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikeButton() {\n  yield takeLatest(LIKE_BUTTON_REQUEST, likeButton);\n}\n\nfunction* watchUnlikeButton() {\n  yield takeLatest(UNLIKE_BUTTON_REQUEST, unlikeButton);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComments), fork(warchRemovePost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPost), fork(watchLikeButton), fork(watchUnlikeButton), fork(watchUploadImages), fork(watchRetweet)]);\n}","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/sagas/post.js"],"names":["LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_BUTTON_REQUEST","LIKE_BUTTON_SUCCESS","LIKE_BUTTON_FAILURE","UNLIKE_BUTTON_REQUEST","UNLIKE_BUTTON_SUCCESS","UNLIKE_BUTTON_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","all","fork","put","takeLatest","delay","call","axios","addPostAPI","data","post","addPost","action","result","type","id","err","error","response","removePostAPI","delete","removePost","console","addCommentsAPI","postId","addComments","loadPostsAPI","lastId","get","loadPosts","loadUserPostsAPI","loadUserPosts","loadHashtagPostsAPI","loadHashtagPosts","LOAD_HAS","loadPostAPI","loadPost","likeButtonAPI","patch","likeButton","unlikeButtonAPI","unlikeButton","uploadImagesAPI","uploadImages","retweetAPI","retweet","watchAddPost","warchRemovePost","watchAddComments","watchLoadPosts","watchLoadUserPosts","watchLoadHashtagPosts","watchLoadPost","watchLikeButton","watchUnlikeButton","watchUploadImages","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["import {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  ADD_POST_TO_ME,\n  REMOVE_POST_OF_ME,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LIKE_BUTTON_REQUEST,\n  LIKE_BUTTON_SUCCESS,\n  LIKE_BUTTON_FAILURE,\n  UNLIKE_BUTTON_REQUEST,\n  UNLIKE_BUTTON_SUCCESS,\n  UNLIKE_BUTTON_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  RETWEET_REQUEST,\n  RETWEET_SUCCESS,\n  RETWEET_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_HASHTAG_POSTS_REQUEST,\n  LOAD_USER_POSTS_SUCCESS,\n  LOAD_USER_POSTS_FAILURE,\n} from \"../constants/post\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentsAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComments(action) {\n  try {\n    const result = yield call(addCommentsAPI, action.data);\n    yield put({\n      type: ADD_COMMENTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_COMMENTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadUserPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_HAS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction likeButtonAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likeButton(action) {\n  try {\n    const result = yield call(likeButtonAPI, action.data);\n    //result에 postid와 userid가 들어가 있음\n    yield put({\n      type: LIKE_BUTTON_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(\"likeerror\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LIKE_BUTTON_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unlikeButtonAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikeButton(action) {\n  try {\n    const result = yield call(unlikeButtonAPI, action.data);\n    yield put({\n      type: UNLIKE_BUTTON_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: UNLIKE_BUTTON_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`, data);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: RETWEET_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* warchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComments() {\n  yield takeLatest(ADD_COMMENTS_REQUEST, addComments);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikeButton() {\n  yield takeLatest(LIKE_BUTTON_REQUEST, likeButton);\n}\n\nfunction* watchUnlikeButton() {\n  yield takeLatest(UNLIKE_BUTTON_REQUEST, unlikeButton);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComments),\n    fork(warchRemovePost),\n    fork(watchLoadPosts),\n    fork(watchLoadUserPosts),\n    fork(watchLoadHashtagPosts),\n    fork(watchLoadPost),\n    fork(watchLikeButton),\n    fork(watchUnlikeButton),\n    fork(watchUploadImages),\n    fork(watchRetweet),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}