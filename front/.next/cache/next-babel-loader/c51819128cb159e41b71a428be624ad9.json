{"ast":null,"code":"// import shortId from \"shortid\";\nimport { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LIKE_BUTTON_REQUEST, LIKE_BUTTON_SUCCESS, LIKE_BUTTON_FAILURE, UNLIKE_BUTTON_REQUEST, UNLIKE_BUTTON_SUCCESS, UNLIKE_BUTTON_FAILURE } from \"../constants/post\";\nimport produce from \"immer\"; // import faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n  likeButtonLoading: false,\n  likeButtonDone: false,\n  likeButtonFailure: null,\n  unlikeButtonLoading: false,\n  unlikeButtonDone: false,\n  unlikeButtonFailure: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesFailure: null\n}; // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComments = data => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LIKE_BUTTON_REQUEST:\n        draft.likeButtonLoading = true;\n        draft.likeButtonDone = false;\n        draft.likeButtonFailure = null;\n        break;\n\n      case LIKE_BUTTON_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likeButtonLoading = false;\n          draft.likeButtonDone = true;\n          break;\n        }\n\n      case LIKE_BUTTON_FAILURE:\n        draft.likeButtonLoading = false;\n        draft.likeButtonFailure = action.error;\n        break;\n\n      case UNLIKE_BUTTON_REQUEST:\n        draft.unlikeButtonLoading = true;\n        draft.unlikeButtonDone = false;\n        draft.unlikeButtonFailure = null;\n        break;\n\n      case UNLIKE_BUTTON_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikeButtonLoading = false;\n          draft.unlikeButtonDone = true;\n          break;\n        }\n\n      case UNLIKE_BUTTON_FAILURE:\n        draft.unlikeButtonLoading = false;\n        draft.unlikeButtonFailure = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length > 10;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/reducers/post.js"],"names":["LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_BUTTON_REQUEST","LIKE_BUTTON_SUCCESS","LIKE_BUTTON_FAILURE","UNLIKE_BUTTON_REQUEST","UNLIKE_BUTTON_SUCCESS","UNLIKE_BUTTON_FAILURE","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostLoading","loadPostDone","loadPostFailure","addPostLoading","addPostDone","addPostFailure","removePostLoading","removePostDone","removePostFailure","addCommentsLoading","addCommentsDone","addCommentsFailure","likeButtonLoading","likeButtonDone","likeButtonFailure","unlikeButtonLoading","unlikeButtonDone","unlikeButtonFailure","uploadImagesLoading","uploadImagesDone","uploadImagesFailure","addPost","data","type","addComments","rootReducer","state","action","draft","post","find","v","id","PostId","Likers","push","UserId","error","filter","concat","length","unshift","Comments","removePostLoadin"],"mappings":"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","sourcesContent":["// import shortId from \"shortid\";\nimport {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LIKE_BUTTON_REQUEST,\n  LIKE_BUTTON_SUCCESS,\n  LIKE_BUTTON_FAILURE,\n  UNLIKE_BUTTON_REQUEST,\n  UNLIKE_BUTTON_SUCCESS,\n  UNLIKE_BUTTON_FAILURE,\n} from \"../constants/post\";\nimport produce from \"immer\";\n// import faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n  likeButtonLoading: false,\n  likeButtonDone: false,\n  likeButtonFailure: null,\n  unlikeButtonLoading: false,\n  unlikeButtonDone: false,\n  unlikeButtonFailure: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesFailure: null,\n};\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\n\nexport const addComments = (data) => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data,\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LIKE_BUTTON_REQUEST:\n        draft.likeButtonLoading = true;\n        draft.likeButtonDone = false;\n        draft.likeButtonFailure = null;\n        break;\n      case LIKE_BUTTON_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.UserId });\n        draft.likeButtonLoading = false;\n        draft.likeButtonDone = true;\n        break;\n      }\n      case LIKE_BUTTON_FAILURE:\n        draft.likeButtonLoading = false;\n        draft.likeButtonFailure = action.error;\n        break;\n      case UNLIKE_BUTTON_REQUEST:\n        draft.unlikeButtonLoading = true;\n        draft.unlikeButtonDone = false;\n        draft.unlikeButtonFailure = null;\n        break;\n      case UNLIKE_BUTTON_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n        draft.unlikeButtonLoading = false;\n        draft.unlikeButtonDone = true;\n        break;\n      }\n      case UNLIKE_BUTTON_FAILURE:\n        draft.unlikeButtonLoading = false;\n        draft.unlikeButtonFailure = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length > 10;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(\n          (v) => v.id !== action.data.PostId\n        );\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}