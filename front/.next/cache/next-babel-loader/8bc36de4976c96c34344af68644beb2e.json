{"ast":null,"code":"import shortId from \"shortid\";\nimport { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../constants/post\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: \"https://picsum.photos/200/300\"\n  }],\n  Comments: [{\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComments = data => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data.content);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/reducers/post.js"],"names":["shortId","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostLoading","loadPostDone","loadPostFailure","addPostLoading","addPostDone","addPostFailure","removePostLoading","removePostDone","removePostFailure","addCommentsLoading","addCommentsDone","addCommentsFailure","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","Comments","sentence","addPost","data","type","addComments","rootReducer","state","action","draft","concat","length","error","unshift","post","find","v","PostId","filter","removePostLoadin"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\nimport {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n} from \"../constants/post\";\nimport produce from \"immer\";\nimport faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n};\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{ src: \"https://picsum.photos/200/300\" }],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\n\nexport const addComments = (data) => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data,\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data.content);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}