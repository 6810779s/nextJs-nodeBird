{"ast":null,"code":"import { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, ADD_POST_TO_ME, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../constants/post\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { generateDummyPost } from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate(); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function addPostAPI(data) {\n//   return axios.post(`/api/post/${data.postId}/comments`, data);\n// }\n\n\nfunction* addComments(action) {\n  try {\n    yield delay(1000); // const result = yield call(addCommentsAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENTS_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_COMMENTS_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function addPostAPI(data) {\n//   return axios.post(`/api/post/${data.postId}/comments`, data);\n// }\n\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addCommentsAPI, action.data);\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* warchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComments() {\n  yield takeLatest(ADD_COMMENTS_REQUEST, addComments);\n}\n\nfunction* warchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComments), fork(warchRemovePost), fork(warchLoadPost)]);\n}","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/nextJs-nodeBird/front/sagas/post.js"],"names":["LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","all","fork","put","takeLatest","delay","call","axios","shortId","generateDummyPost","addPostAPI","data","post","addPost","action","id","generate","type","content","err","error","response","removePost","console","addComments","loadPost","watchAddPost","warchRemovePost","watchAddComments","warchLoadPost","postSaga"],"mappings":"AAAA,SACEA,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,oBAPF,EAQEC,oBARF,EASEC,oBATF,EAUEC,cAVF,EAWEC,iBAXF,EAYEC,mBAZF,EAaEC,mBAbF,EAcEC,mBAdF,QAeO,mBAfP;AAgBA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOJ,KAAK,CAACK,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMT,KAAK,CAAC,IAAD,CAAX;AACA,UAAMU,EAAE,GAAGP,OAAO,CAACQ,QAAR,EAAX,CAFE,CAGF;;AACA,UAAMb,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAE1B,gBADE;AAERoB,MAAAA,IAAI,EAAE;AAAEI,QAAAA,EAAF;AAAMG,QAAAA,OAAO,EAAEJ,MAAM,CAACH;AAAtB;AAFE,KAAD,CAAT;AAIA,UAAMR,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAErB,cADE;AAERe,MAAAA,IAAI,EAAEI;AAFE,KAAD,CAAT;AAID,GAZD,CAYE,OAAOI,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAAC;AACR;AACAc,MAAAA,IAAI,EAAEzB,gBAFE;AAGR4B,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAHZ,KAAD,CAAT;AAKD;AACF;;AAED,UAAUW,UAAV,CAAqBR,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMT,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMF,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAElB,mBADE;AAERY,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAIA,UAAMR,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEpB,iBADE;AAERc,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAXD,CAWE,OAAOQ,GAAP,EAAY;AACZI,IAAAA,OAAO,CAACH,KAAR,CAAc,MAAd,EAAsBD,GAAtB;AACA,UAAMhB,GAAG,CAAC;AACR;AACAc,MAAAA,IAAI,EAAEjB,mBAFE;AAGRoB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAHZ,KAAD,CAAT;AAKD;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUa,WAAV,CAAsBV,MAAtB,EAA8B;AAC5B,MAAI;AACF,UAAMT,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMF,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEvB,oBADE;AAERiB,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAAC;AACR;AACAc,MAAAA,IAAI,EAAEtB,oBAFE;AAGRyB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAHZ,KAAD,CAAT;AAKD;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUc,QAAV,CAAmBX,MAAnB,EAA2B;AACzB,MAAI;AACF,UAAMT,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMF,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAE7B,iBADE;AAERuB,MAAAA,IAAI,EAAEF,iBAAiB,CAAC,EAAD;AAFf,KAAD,CAAT;AAID,GAPD,CAOE,OAAOU,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAAC;AACR;AACAc,MAAAA,IAAI,EAAE5B,iBAFE;AAGR+B,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAHZ,KAAD,CAAT;AAKD;AACF;;AAED,UAAUe,YAAV,GAAyB;AACvB,QAAMtB,UAAU,CAACd,gBAAD,EAAmBuB,OAAnB,CAAhB;AACD;;AAED,UAAUc,eAAV,GAA4B;AAC1B,QAAMvB,UAAU,CAACN,mBAAD,EAAsBwB,UAAtB,CAAhB;AACD;;AAED,UAAUM,gBAAV,GAA6B;AAC3B,QAAMxB,UAAU,CAACX,oBAAD,EAAuB+B,WAAvB,CAAhB;AACD;;AAED,UAAUK,aAAV,GAA0B;AACxB,QAAMzB,UAAU,CAACjB,iBAAD,EAAoBsC,QAApB,CAAhB;AACD;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAClC,QAAM7B,GAAG,CAAC,CACRC,IAAI,CAACwB,YAAD,CADI,EAERxB,IAAI,CAAC0B,gBAAD,CAFI,EAGR1B,IAAI,CAACyB,eAAD,CAHI,EAIRzB,IAAI,CAAC2B,aAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  ADD_POST_TO_ME,\n  REMOVE_POST_OF_ME,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n} from \"../constants/post\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { generateDummyPost } from \"../reducers/post\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: { id, content: action.data },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function addPostAPI(data) {\n//   return axios.post(`/api/post/${data.postId}/comments`, data);\n// }\n\nfunction* addComments(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentsAPI, action.data);\n    yield put({\n      type: ADD_COMMENTS_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_COMMENTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function addPostAPI(data) {\n//   return axios.post(`/api/post/${data.postId}/comments`, data);\n// }\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentsAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* warchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComments() {\n  yield takeLatest(ADD_COMMENTS_REQUEST, addComments);\n}\n\nfunction* warchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComments),\n    fork(warchRemovePost),\n    fork(warchLoadPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}