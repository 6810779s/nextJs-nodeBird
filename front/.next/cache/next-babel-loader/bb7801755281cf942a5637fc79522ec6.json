{"ast":null,"code":"import { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, CHANGE_NICKNAME_FAILURE } from \"../constants/user\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\"; //takeEvery : 두번 눌렀을때 , 두개가 올라가게됨\n//takeLatest: 두번 연속 눌렀을때도 마지막 액션만 올라감.\n//takeLeading: 맨처음 하나만 올라감.\n//throttle: 설정한 시간동안 누른 동작이 여러개면, 하나만 액션동작\n\nfunction loadMyInfoAPI() {\n  return axios.get(\"/user\"); //baseURL = \"http://localhost:3065\";\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI, action.data);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post(\"/user/login\", data); //baseURL = \"http://localhost:3065\";\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\");\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n} //proxy, cors를 피해가는 방법중 하나. 브라우저=>프론트=>백엔드=>프론트=>브라우저\n\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function followingAPI() {\n//   return axios.post('/api/signup');\n// }\n\n\nfunction* following(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function unfollowingAPI() {\n//   return axios.post('/api/signup');\n// }\n\n\nfunction* unfollowing(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  //   while (true) {\n  //     yield take('LOG_IN_REQUEST', logIn);\n  //   }\n  yield takeLatest(LOG_IN_REQUEST, logIn); // 위에 반복문 쓴것과 똑같이 작동\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollowing() {\n  yield takeLatest(FOLLOW_REQUEST, following);\n}\n\nfunction* watchUnfollowing() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollowing);\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollowing), fork(watchUnfollowing), fork(watchLoadMyInfo), fork(watchLoadMyInfo)]);\n}","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/sagas/user.js"],"names":["LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","all","fork","put","takeLatest","delay","call","axios","loadMyInfoAPI","get","loadMyInfo","action","result","data","type","err","error","response","logInAPI","post","logIn","logOutAPI","logOut","console","signUpAPI","signUp","following","unfollowing","watchLogIn","watchLogOut","watchSignUp","watchFollowing","watchUnfollowing","watchLoadMyInfo","userSaga"],"mappings":"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","sourcesContent":["import {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n  FOLLOW_REQUEST,\n  FOLLOW_SUCCESS,\n  FOLLOW_FAILURE,\n  UNFOLLOW_REQUEST,\n  UNFOLLOW_SUCCESS,\n  UNFOLLOW_FAILURE,\n  LOAD_MY_INFO_REQUEST,\n  LOAD_MY_INFO_SUCCESS,\n  LOAD_MY_INFO_FAILURE,\n  CHANGE_NICKNAME_REQUEST,\n  CHANGE_NICKNAME_SUCCESS,\n  CHANGE_NICKNAME_FAILURE,\n} from \"../constants/user\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n//takeEvery : 두번 눌렀을때 , 두개가 올라가게됨\n//takeLatest: 두번 연속 눌렀을때도 마지막 액션만 올라감.\n//takeLeading: 맨처음 하나만 올라감.\n//throttle: 설정한 시간동안 누른 동작이 여러개면, 하나만 액션동작\n\nfunction loadMyInfoAPI() {\n  return axios.get(\"/user\");\n  //baseURL = \"http://localhost:3065\";\n}\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI, action.data);\n\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post(\"/user/login\", data);\n  //baseURL = \"http://localhost:3065\";\n}\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\");\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n//proxy, cors를 피해가는 방법중 하나. 브라우저=>프론트=>백엔드=>프론트=>브라우저\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function followingAPI() {\n//   return axios.post('/api/signup');\n// }\n\nfunction* following(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function unfollowingAPI() {\n//   return axios.post('/api/signup');\n// }\n\nfunction* unfollowing(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  //   while (true) {\n  //     yield take('LOG_IN_REQUEST', logIn);\n  //   }\n\n  yield takeLatest(LOG_IN_REQUEST, logIn); // 위에 반복문 쓴것과 똑같이 작동\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollowing() {\n  yield takeLatest(FOLLOW_REQUEST, following);\n}\n\nfunction* watchUnfollowing() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollowing);\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n    fork(watchFollowing),\n    fork(watchUnfollowing),\n    fork(watchLoadMyInfo),\n    fork(watchLoadMyInfo),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}