{"ast":null,"code":"var __jsx = React.createElement;\nimport { Avatar, Button, ButtonGroup, Card, CardActions, CardContent, CardHeader, CardMedia, IconButton, List, ListItem, ListItemAvatar, ListItemText, Popover, Typography } from \"@material-ui/core\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport TextsmsIcon from \"@material-ui/icons/Textsms\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostImages from \"./PostImages\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport { REMOVE_POST_REQUEST, LIKE_BUTTON_REQUEST, UNLIKE_BUTTON_REQUEST, RETWEET_REQUEST } from \"../constants/post\";\nimport Loading from \"./Loading\";\nimport FollowButton from \"./FollowButton\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nmoment.locale(\"ko\");\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const open = Boolean(anchorEl);\n  const id = me === null || me === void 0 ? void 0 : me.id; // 이문법과 같음 me && me.id\n\n  const UIid = open ? \"simple-popover\" : undefined;\n  const {\n    0: comment,\n    1: setComment\n  } = useState(false);\n  const dispatch = useDispatch();\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const onToggleComment = () => {\n    setComment(prev => !prev);\n  };\n\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: UNLIKE_BUTTON_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: LIKE_BUTTON_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const OnRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 30\n    }\n  }, __jsx(Card, null, __jsx(\"div\", {\n    style: {\n      float: \"right\"\n    }\n  }, moment(post.createdAt).fromNow()), __jsx(CardHeader, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, {\n      \"aria-label\": \"userImg\"\n    }, post.User.nickname[0]))),\n    title: __jsx(Link, {\n      href: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, post.User.nickname)),\n    action: __jsx(IconButton, {\n      \"aria-label\": \"more\",\n      \"aria-describedby\": UIid,\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleClick\n    }, __jsx(MoreHorizIcon, null)),\n    subheader: me && __jsx(FollowButton, {\n      post: post\n    })\n  }), __jsx(CardMedia, {\n    style: {\n      margin: \"auto\"\n    }\n  }, post.Images[0] && __jsx(PostImages, {\n    images: post.Images\n  })), post.RetweetId && post.Retweet ? __jsx(Card, null, __jsx(\"div\", {\n    style: {\n      float: \"right\"\n    }\n  }, moment(post.createdAt).format(\"YYYY.MM.DD\")), __jsx(CardHeader, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, {\n      \"aria-label\": \"userImg\"\n    }, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname\n  }), __jsx(CardMedia, {\n    style: {\n      margin: \"auto\"\n    }\n  }, post.Retweet.Images[0] && __jsx(PostImages, {\n    images: post.Retweet.Images\n  })), __jsx(CardContent, null, __jsx(PostCardContent, {\n    postData: post.Retweet.content\n  }))) : __jsx(CardContent, null, __jsx(PostCardContent, {\n    postData: post.content\n  })), __jsx(CardActions, {\n    disableSpacing: true\n  }, __jsx(IconButton, {\n    \"aria-label\": \"retweet\",\n    onClick: OnRetweet\n  }, __jsx(RepeatIcon, null)), liked ? __jsx(IconButton, {\n    \"aria-label\": \"add to favorite\",\n    onClick: onUnlike\n  }, __jsx(FavoriteIcon, {\n    style: {\n      color: \"red\"\n    }\n  })) : __jsx(IconButton, {\n    \"aria-label\": \"add to favorite\",\n    onClick: onLike\n  }, __jsx(FavoriteBorderIcon, null)), __jsx(IconButton, {\n    \"aria-label\": \"comment\",\n    onClick: onToggleComment\n  }, __jsx(TextsmsIcon, null))), __jsx(Popover, {\n    id: UIid,\n    open: open,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"center\"\n    },\n    transformOrigin: {\n      vertical: \"top\",\n      horizontal: \"center\"\n    }\n  }, __jsx(ButtonGroup, null, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n    onClick: onRemovePost\n  }, removePostLoading ? __jsx(Loading, null) : \"삭제\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\")))), comment && __jsx(\"div\", null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    subheader: __jsx(ListSubheader, null, post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\")\n  }, post.Comments.map(data => __jsx(ListItem, null, __jsx(ListItemAvatar, null, __jsx(Link, {\n    href: `/user/${data.User.id}`\n  }, __jsx(\"a\", null, __jsx(Avatar, null, data.User.nickname[0])))), __jsx(ListItemText, {\n    primary: data.User.nickname,\n    secondary: __jsx(React.Fragment, null, __jsx(Typography, {\n      component: \"span\",\n      variant: \"body2\",\n      color: \"textPrimary\"\n    }, data.content))\n  }))))));\n};\n\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}