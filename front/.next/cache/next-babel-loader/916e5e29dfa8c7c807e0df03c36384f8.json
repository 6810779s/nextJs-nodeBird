{"ast":null,"code":"import { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../constants/user\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\"; //takeEvery : 두번 눌렀을때 , 두개가 올라가게됨\n//takeLatest: 두번 연속 눌렀을때도 마지막 액션만 올라감.\n//takeLeading: 맨처음 하나만 올라감.\n//throttle: 설정한 시간동안 누른 동작이 여러개면, 하나만 액션동작\n// function logInAPI(data) {\n//   return axios.post('/api/login', data);\n// }\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function logOutAPI() {\n//   return axios.post('/api/logout');\n// }\n\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post(\"http://localhost:8080/user\");\n}\n\nfunction* signUp() {\n  try {\n    const result = yield call(signUpAPI);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function followingAPI() {\n//   return axios.post('/api/signup');\n// }\n\n\nfunction* following(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function unfollowingAPI() {\n//   return axios.post('/api/signup');\n// }\n\n\nfunction* unfollowing(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  //   while (true) {\n  //     yield take('LOG_IN_REQUEST', logIn);\n  //   }\n  yield takeLatest(LOG_IN_REQUEST, logIn); // 위에 반복문 쓴것과 똑같이 작동\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollowing() {\n  yield takeLatest(FOLLOW_REQUEST, following);\n}\n\nfunction* watchUnfollowing() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollowing);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollowing), fork(watchUnfollowing)]);\n}","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/nextJs-nodeBird/front/sagas/user.js"],"names":["LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","all","fork","put","takeLatest","delay","call","axios","logIn","action","type","data","err","error","response","logOut","console","signUpAPI","post","signUp","result","log","following","unfollowing","watchLogIn","watchLogOut","watchSignUp","watchFollowing","watchUnfollowing","userSaga"],"mappings":"AAAA,SACEA,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,EAUEC,cAVF,EAWEC,cAXF,EAYEC,cAZF,EAaEC,gBAbF,EAcEC,gBAdF,EAeEC,gBAfF,QAgBO,mBAhBP;AAiBA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMJ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEvB,cADE;AAERwB,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACR;AACAO,MAAAA,IAAI,EAAEtB,cAFE;AAGRyB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAHZ,KAAD,CAAT;AAKD;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUI,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMV,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMF,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEpB;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOsB,GAAP,EAAY;AACZI,IAAAA,OAAO,CAACH,KAAR,CAAc,MAAd,EAAsBD,GAAtB;AACA,UAAMT,GAAG,CAAC;AACR;AACAO,MAAAA,IAAI,EAAEnB,eAFE;AAGRsB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAHZ,KAAD,CAAT;AAKD;AACF;;AAED,SAASM,SAAT,GAAqB;AACnB,SAAOV,KAAK,CAACW,IAAN,CAAW,4BAAX,CAAP;AACD;;AAED,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMd,IAAI,CAACW,SAAD,CAAzB;AACAD,IAAAA,OAAO,CAACK,GAAR,CAAYD,MAAZ;AACA,UAAMjB,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEjB;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOmB,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEhB,eADE;AAERmB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUW,SAAV,CAAoBb,MAApB,EAA4B;AAC1B,MAAI;AACF;AACA,UAAMJ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEd,cADE;AAERe,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEb,cADE;AAERgB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUY,WAAV,CAAsBd,MAAtB,EAA8B;AAC5B,MAAI;AACF;AACA,UAAMJ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEX,gBADE;AAERY,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEV,gBADE;AAERa,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUa,UAAV,GAAuB;AACrB;AACA;AACA;AAEA,QAAMpB,UAAU,CAAClB,cAAD,EAAiBsB,KAAjB,CAAhB,CALqB,CAKoB;AAC1C;;AAED,UAAUiB,WAAV,GAAwB;AACtB,QAAMrB,UAAU,CAACf,eAAD,EAAkB0B,MAAlB,CAAhB;AACD;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMtB,UAAU,CAACZ,eAAD,EAAkB2B,MAAlB,CAAhB;AACD;;AAED,UAAUQ,cAAV,GAA2B;AACzB,QAAMvB,UAAU,CAACT,cAAD,EAAiB2B,SAAjB,CAAhB;AACD;;AAED,UAAUM,gBAAV,GAA6B;AAC3B,QAAMxB,UAAU,CAACN,gBAAD,EAAmByB,WAAnB,CAAhB;AACD;;AACD,eAAe,UAAUM,QAAV,GAAqB;AAClC,QAAM5B,GAAG,CAAC,CACRC,IAAI,CAACsB,UAAD,CADI,EAERtB,IAAI,CAACuB,WAAD,CAFI,EAGRvB,IAAI,CAACwB,WAAD,CAHI,EAIRxB,IAAI,CAACyB,cAAD,CAJI,EAKRzB,IAAI,CAAC0B,gBAAD,CALI,CAAD,CAAT;AAOD","sourcesContent":["import {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n  FOLLOW_REQUEST,\n  FOLLOW_SUCCESS,\n  FOLLOW_FAILURE,\n  UNFOLLOW_REQUEST,\n  UNFOLLOW_SUCCESS,\n  UNFOLLOW_FAILURE,\n} from \"../constants/user\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n//takeEvery : 두번 눌렀을때 , 두개가 올라가게됨\n//takeLatest: 두번 연속 눌렀을때도 마지막 액션만 올라감.\n//takeLeading: 맨처음 하나만 올라감.\n//throttle: 설정한 시간동안 누른 동작이 여러개면, 하나만 액션동작\n\n// function logInAPI(data) {\n//   return axios.post('/api/login', data);\n// }\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function logOutAPI() {\n//   return axios.post('/api/logout');\n// }\n\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    // const result = yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post(\"http://localhost:8080/user\");\n}\n\nfunction* signUp() {\n  try {\n    const result = yield call(signUpAPI);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function followingAPI() {\n//   return axios.post('/api/signup');\n// }\n\nfunction* following(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function unfollowingAPI() {\n//   return axios.post('/api/signup');\n// }\n\nfunction* unfollowing(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  //   while (true) {\n  //     yield take('LOG_IN_REQUEST', logIn);\n  //   }\n\n  yield takeLatest(LOG_IN_REQUEST, logIn); // 위에 반복문 쓴것과 똑같이 작동\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollowing() {\n  yield takeLatest(FOLLOW_REQUEST, following);\n}\n\nfunction* watchUnfollowing() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollowing);\n}\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n    fork(watchFollowing),\n    fork(watchUnfollowing),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}