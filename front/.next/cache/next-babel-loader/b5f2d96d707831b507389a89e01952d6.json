{"ast":null,"code":"// import shortId from \"shortid\";\nimport { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LIKE_BUTTON_REQUEST, LIKE_BUTTON_SUCCESS, LIKE_BUTTON_FAILURE, UNLIKE_BUTTON_REQUEST, UNLIKE_BUTTON_SUCCESS, UNLIKE_BUTTON_FAILURE } from \"../constants/post\";\nimport produce from \"immer\"; // import faker from \"faker\";\n\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n  likeButtonLoading: false,\n  likeButtonDone: false,\n  likeButtonFailure: null,\n  unlikeButtonLoading: false,\n  unlikeButtonDone: false,\n  unlikeButtonFailure: null\n}; // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComments = function addComments(data) {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data: data\n  };\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LIKE_BUTTON_REQUEST:\n        draft.likeButtonLoading = true;\n        draft.likeButtonDone = false;\n        draft.likeButtonFailure = null;\n        break;\n\n      case LIKE_BUTTON_SUCCESS:\n        draft.likeButtonLoading = false;\n        draft.likeButtonDone = true;\n        break;\n\n      case LIKE_BUTTON_FAILURE:\n        draft.likeButtonLoading = false;\n        draft.likeButtonFailure = action.error;\n        break;\n\n      case UNLIKE_BUTTON_REQUEST:\n        draft.likeButtonLoading = true;\n        draft.likeButtonDone = false;\n        draft.likeButtonFailure = null;\n        break;\n\n      case UNLIKE__BUTTON_SUCCESS:\n        draft.likeButtonLoading = false;\n        draft.likeButtonDone = true;\n        break;\n\n      case LIKE_BUTTON_FAILURE:\n        draft.likeButtonLoading = false;\n        draft.likeButtonFailure = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length > 10;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n\n      case ADD_COMMENTS_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        });\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/reducers/post.js"],"names":["LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_BUTTON_REQUEST","LIKE_BUTTON_SUCCESS","LIKE_BUTTON_FAILURE","UNLIKE_BUTTON_REQUEST","UNLIKE_BUTTON_SUCCESS","UNLIKE_BUTTON_FAILURE","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostLoading","loadPostDone","loadPostFailure","addPostLoading","addPostDone","addPostFailure","removePostLoading","removePostDone","removePostFailure","addCommentsLoading","addCommentsDone","addCommentsFailure","likeButtonLoading","likeButtonDone","likeButtonFailure","unlikeButtonLoading","unlikeButtonDone","unlikeButtonFailure","addPost","data","type","addComments","rootReducer","state","action","draft","error","UNLIKE__BUTTON_SUCCESS","concat","length","unshift","post","find","v","id","PostId","Comments","filter","removePostLoadin"],"mappings":"AAAA;AACA,SACEA,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,oBAPF,EAQEC,oBARF,EASEC,oBATF,EAUEC,mBAVF,EAWEC,mBAXF,EAYEC,mBAZF,EAaEC,mBAbF,EAcEC,mBAdF,EAeEC,mBAfF,EAgBEC,qBAhBF,EAiBEC,qBAjBF,EAkBEC,qBAlBF,QAmBO,mBAnBP;AAoBA,OAAOC,OAAP,MAAoB,OAApB,C,CACA;;AAEA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE,EAFc;AAG1BC,EAAAA,YAAY,EAAE,IAHY;AAI1BC,EAAAA,eAAe,EAAE,KAJS;AAK1BC,EAAAA,YAAY,EAAE,KALY;AAM1BC,EAAAA,eAAe,EAAE,IANS;AAO1BC,EAAAA,cAAc,EAAE,KAPU;AAQ1BC,EAAAA,WAAW,EAAE,KARa;AAS1BC,EAAAA,cAAc,EAAE,IATU;AAU1BC,EAAAA,iBAAiB,EAAE,KAVO;AAW1BC,EAAAA,cAAc,EAAE,KAXU;AAY1BC,EAAAA,iBAAiB,EAAE,IAZO;AAa1BC,EAAAA,kBAAkB,EAAE,KAbM;AAc1BC,EAAAA,eAAe,EAAE,KAdS;AAe1BC,EAAAA,kBAAkB,EAAE,IAfM;AAgB1BC,EAAAA,iBAAiB,EAAE,KAhBO;AAiB1BC,EAAAA,cAAc,EAAE,KAjBU;AAkB1BC,EAAAA,iBAAiB,EAAE,IAlBO;AAmB1BC,EAAAA,mBAAmB,EAAE,KAnBK;AAoB1BC,EAAAA,gBAAgB,EAAE,KApBQ;AAqB1BC,EAAAA,mBAAmB,EAAE;AArBK,CAArB,C,CAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAExC,gBADD;AAELuC,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACF,IAAD,EAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAErC,oBADD;AAELoC,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;;AAOP,IAAMG,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzB3B,YAAyB;AAAA,MAAX4B,MAAW;AACpD,SAAO7B,OAAO,CAAC4B,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC/B,YAAQD,MAAM,CAACJ,IAAf;AACE,WAAK/B,mBAAL;AACEoC,QAAAA,KAAK,CAACb,iBAAN,GAA0B,IAA1B;AACAa,QAAAA,KAAK,CAACZ,cAAN,GAAuB,KAAvB;AACAY,QAAAA,KAAK,CAACX,iBAAN,GAA0B,IAA1B;AACA;;AACF,WAAKxB,mBAAL;AACEmC,QAAAA,KAAK,CAACb,iBAAN,GAA0B,KAA1B;AACAa,QAAAA,KAAK,CAACZ,cAAN,GAAuB,IAAvB;AACA;;AACF,WAAKtB,mBAAL;AACEkC,QAAAA,KAAK,CAACb,iBAAN,GAA0B,KAA1B;AACAa,QAAAA,KAAK,CAACX,iBAAN,GAA0BU,MAAM,CAACE,KAAjC;AACA;;AACF,WAAKlC,qBAAL;AACEiC,QAAAA,KAAK,CAACb,iBAAN,GAA0B,IAA1B;AACAa,QAAAA,KAAK,CAACZ,cAAN,GAAuB,KAAvB;AACAY,QAAAA,KAAK,CAACX,iBAAN,GAA0B,IAA1B;AACA;;AACF,WAAKa,sBAAL;AACEF,QAAAA,KAAK,CAACb,iBAAN,GAA0B,KAA1B;AACAa,QAAAA,KAAK,CAACZ,cAAN,GAAuB,IAAvB;AACA;;AACF,WAAKtB,mBAAL;AACEkC,QAAAA,KAAK,CAACb,iBAAN,GAA0B,KAA1B;AACAa,QAAAA,KAAK,CAACX,iBAAN,GAA0BU,MAAM,CAACE,KAAjC;AACA;;AACF,WAAKjD,iBAAL;AACEgD,QAAAA,KAAK,CAACzB,eAAN,GAAwB,IAAxB;AACAyB,QAAAA,KAAK,CAACxB,YAAN,GAAqB,KAArB;AACAwB,QAAAA,KAAK,CAACvB,eAAN,GAAwB,IAAxB;AACA;;AACF,WAAKxB,iBAAL;AACE+C,QAAAA,KAAK,CAAC5B,SAAN,GAAkB4B,KAAK,CAAC5B,SAAN,CAAgB+B,MAAhB,CAAuBJ,MAAM,CAACL,IAA9B,CAAlB;AACAM,QAAAA,KAAK,CAACzB,eAAN,GAAwB,KAAxB;AACAyB,QAAAA,KAAK,CAACxB,YAAN,GAAqB,IAArB;AACAwB,QAAAA,KAAK,CAAC1B,YAAN,GAAqB0B,KAAK,CAAC5B,SAAN,CAAgBgC,MAAhB,GAAyB,EAA9C;AACA;;AACF,WAAKlD,iBAAL;AACE8C,QAAAA,KAAK,CAACzB,eAAN,GAAwB,KAAxB;AACAyB,QAAAA,KAAK,CAACvB,eAAN,GAAwBsB,MAAM,CAACE,KAA/B;AACA;;AACF,WAAK9C,gBAAL;AACE6C,QAAAA,KAAK,CAACtB,cAAN,GAAuB,IAAvB;AACAsB,QAAAA,KAAK,CAACrB,WAAN,GAAoB,KAApB;AACAqB,QAAAA,KAAK,CAACpB,cAAN,GAAuB,IAAvB;AACA;;AACF,WAAKxB,gBAAL;AACE4C,QAAAA,KAAK,CAAC5B,SAAN,CAAgBiC,OAAhB,CAAwBN,MAAM,CAACL,IAA/B;AACAM,QAAAA,KAAK,CAACtB,cAAN,GAAuB,KAAvB;AACAsB,QAAAA,KAAK,CAACrB,WAAN,GAAoB,IAApB;AACA;;AACF,WAAKtB,gBAAL;AACE2C,QAAAA,KAAK,CAACtB,cAAN,GAAuB,KAAvB;AACAsB,QAAAA,KAAK,CAACpB,cAAN,GAAuBmB,MAAM,CAACE,KAA9B;AACA;;AACF,WAAK3C,oBAAL;AACE0C,QAAAA,KAAK,CAAChB,kBAAN,GAA2B,IAA3B;AACAgB,QAAAA,KAAK,CAACf,eAAN,GAAwB,KAAxB;AACAe,QAAAA,KAAK,CAACd,kBAAN,GAA2B,IAA3B;AACA;;AACF,WAAK3B,oBAAL;AACE,YAAM+C,IAAI,GAAGN,KAAK,CAAC5B,SAAN,CAAgBmC,IAAhB,CAAqB,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAAP,CAAYgB,MAA5B;AAAA,SAArB,CAAb;AACAJ,QAAAA,IAAI,CAACK,QAAL,CAAcN,OAAd,CAAsBN,MAAM,CAACL,IAA7B;AACAM,QAAAA,KAAK,CAAChB,kBAAN,GAA2B,KAA3B;AACAgB,QAAAA,KAAK,CAACf,eAAN,GAAwB,IAAxB;AACA;;AAEF,WAAKzB,oBAAL;AACEwC,QAAAA,KAAK,CAAChB,kBAAN,GAA2B,KAA3B;AACAgB,QAAAA,KAAK,CAACd,kBAAN,GAA2Ba,MAAM,CAACE,KAAlC;AACA;;AACF,WAAKxC,mBAAL;AACEuC,QAAAA,KAAK,CAACnB,iBAAN,GAA0B,IAA1B;AACAmB,QAAAA,KAAK,CAAClB,cAAN,GAAuB,KAAvB;AACAkB,QAAAA,KAAK,CAACjB,iBAAN,GAA0B,IAA1B;AACA;;AACF,WAAKrB,mBAAL;AACEsC,QAAAA,KAAK,CAAC5B,SAAN,GAAkB4B,KAAK,CAAC5B,SAAN,CAAgBwC,MAAhB,CAAuB,UAACJ,CAAD;AAAA,iBAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAAvB;AAAA,SAAvB,CAAlB;AACAM,QAAAA,KAAK,CAACnB,iBAAN,GAA0B,KAA1B;AACAmB,QAAAA,KAAK,CAAClB,cAAN,GAAuB,IAAvB;AACA;;AACF,WAAKnB,mBAAL;AACEqC,QAAAA,KAAK,CAACa,gBAAN,GAAyB,KAAzB;AACAb,QAAAA,KAAK,CAACjB,iBAAN,GAA0BgB,MAAM,CAACE,KAAjC;AACA;;AAEF;AACE;AAxFJ;AA0FD,GA3Fa,CAAd;AA4FD,CA7FD;;AA+FA,eAAeJ,WAAf","sourcesContent":["// import shortId from \"shortid\";\nimport {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LIKE_BUTTON_REQUEST,\n  LIKE_BUTTON_SUCCESS,\n  LIKE_BUTTON_FAILURE,\n  UNLIKE_BUTTON_REQUEST,\n  UNLIKE_BUTTON_SUCCESS,\n  UNLIKE_BUTTON_FAILURE,\n} from \"../constants/post\";\nimport produce from \"immer\";\n// import faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n  likeButtonLoading: false,\n  likeButtonDone: false,\n  likeButtonFailure: null,\n  unlikeButtonLoading: false,\n  unlikeButtonDone: false,\n  unlikeButtonFailure: null,\n};\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\n\nexport const addComments = (data) => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data,\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LIKE_BUTTON_REQUEST:\n        draft.likeButtonLoading = true;\n        draft.likeButtonDone = false;\n        draft.likeButtonFailure = null;\n        break;\n      case LIKE_BUTTON_SUCCESS:\n        draft.likeButtonLoading = false;\n        draft.likeButtonDone = true;\n        break;\n      case LIKE_BUTTON_FAILURE:\n        draft.likeButtonLoading = false;\n        draft.likeButtonFailure = action.error;\n        break;\n      case UNLIKE_BUTTON_REQUEST:\n        draft.likeButtonLoading = true;\n        draft.likeButtonDone = false;\n        draft.likeButtonFailure = null;\n        break;\n      case UNLIKE__BUTTON_SUCCESS:\n        draft.likeButtonLoading = false;\n        draft.likeButtonDone = true;\n        break;\n      case LIKE_BUTTON_FAILURE:\n        draft.likeButtonLoading = false;\n        draft.likeButtonFailure = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length > 10;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}