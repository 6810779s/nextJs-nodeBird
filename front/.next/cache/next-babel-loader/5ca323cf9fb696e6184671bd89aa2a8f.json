{"ast":null,"code":"import { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, ADD_POST_TO_ME, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../constants/post\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { generateDummyPost } from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`api/post`, data, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentsAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data, {\n    withCredentials: true\n  });\n}\n\nfunction* addComments(action) {\n  try {\n    const result = yield call(addCommentsAPI, action.data);\n    yield put({\n      type: ADD_COMMENTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_COMMENTS_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function addPostAPI(data) {\n//   return axios.post(`/api/post/${data.postId}/comments`, data);\n// }\n\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addCommentsAPI, action.data);\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* warchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComments() {\n  yield takeLatest(ADD_COMMENTS_REQUEST, addComments);\n}\n\nfunction* warchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComments), fork(warchRemovePost), fork(warchLoadPost)]);\n}","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/sagas/post.js"],"names":["LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","all","fork","put","takeLatest","delay","call","axios","generateDummyPost","addPostAPI","data","post","content","withCredentials","addPost","action","result","type","id","err","error","response","removePostAPI","delete","removePost","console","addCommentsAPI","postId","addComments","loadPost","watchAddPost","warchRemovePost","watchAddComments","warchLoadPost","postSaga"],"mappings":"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","sourcesContent":["import {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  ADD_POST_TO_ME,\n  REMOVE_POST_OF_ME,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n} from \"../constants/post\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { generateDummyPost } from \"../reducers/post\";\nfunction addPostAPI(data) {\n  return axios.post(\n    \"/post\",\n    { content: data },\n    {\n      withCredentials: true,\n    }\n  );\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`api/post`, data, {\n    withCredentials: true,\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentsAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data, {\n    withCredentials: true,\n  });\n}\n\nfunction* addComments(action) {\n  try {\n    const result = yield call(addCommentsAPI, action.data);\n    yield put({\n      type: ADD_COMMENTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_COMMENTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// function addPostAPI(data) {\n//   return axios.post(`/api/post/${data.postId}/comments`, data);\n// }\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentsAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* warchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComments() {\n  yield takeLatest(ADD_COMMENTS_REQUEST, addComments);\n}\n\nfunction* warchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComments),\n    fork(warchRemovePost),\n    fork(warchLoadPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}