{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useCallback } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../../components/AppLayout\";\nimport { LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POSTS_REQUEST } from \"../../constants/post\";\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from \"../../constants/user\";\nimport wrapper from \"../../store/configureStore\";\nimport axios from \"axios\";\nimport { END } from \"redux-saga\";\nimport Head from \"next/head\";\nimport { Avatar, Divider, Card, CardContent, CardHeader, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PostCard from \"../../components/PostCard\";\nimport Loading from \"../../components/Loading\";\nconst useStyles = makeStyles({\n  profileWrap: {\n    maxWidth: \"500px\",\n    margin: \"auto\",\n    padding: \"30px\"\n  },\n  typographyBox: {\n    width: \"55px\",\n    background: \"#E6E6E6\",\n    textAlign: \"center\"\n  },\n  cardLayout: {\n    maxWidth: \"400px\",\n    margin: \"20px auto\"\n  }\n});\n\nconst Hashtag = () => {\n  const dispatch = useDispatch();\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostLoading\n  } = useSelector(state => state.post);\n  const [ref, inView] = useInView({\n    threshold: 1,\n    triggerOnce: true,\n    unobserveOnEnter: true,\n    delay: 1000,\n    trackVisibility: true\n  });\n  const router = useRouter();\n  const {\n    tag\n  } = router.query;\n  useEffect(() => {\n    if (inView && !loadPostLoading && hasMorePosts) {\n      var _mainPosts;\n\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_HASHTAG_POSTS_REQUEST,\n        lastId,\n        data: tag\n      });\n    }\n  }, [inView]);\n  return __jsx(AppLayout, null, __jsx(Head, null, __jsx(\"title\", null, tag, \" \\uAD00\\uB828 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: `${tag}관련 글`\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${tag}관련 글`\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${tag}관련 글`\n  })), mainPosts.map(post => {\n    var _mainPosts2;\n\n    return (// <PostCard post={post} key={post.id} />\n      __jsx(React.Fragment, {\n        key: post.id\n      }, __jsx(PostCard, {\n        post: post\n      }), post.id === ((_mainPosts2 = mainPosts[mainPosts.length - 1]) === null || _mainPosts2 === void 0 ? void 0 : _mainPosts2.id) && hasMorePosts ? __jsx(\"div\", {\n        ref: ref\n      }, __jsx(Loading, null)) : \"\")\n    );\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: context.params.tag\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Hashtag;","map":null,"metadata":{},"sourceType":"module"}