{"ast":null,"code":"var _jsxFileName = \"/Users/eunheejang/Desktop/\\u110B\\u1173\\u11AB\\u1112\\u1174\\u1111\\u1169\\u11AF\\u1103\\u1165/programming/program/react-web/nextJs-nodeBird/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport Loading from \"../components/Loading\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../constants/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../constants/user\";\nimport { useInView } from \"react-intersection-observer\";\nimport wrapper from \"../store/configureStore\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostLoading,\n    retweetFailure\n  } = useSelector(state => state.post);\n  const [ref, inView] = useInView({\n    threshold: 1,\n    triggerOnce: true,\n    unobserveOnEnter: true,\n    delay: 1000,\n    trackVisibility: true\n  });\n  useEffect(() => {\n    if (retweetFailure) {\n      alert(retweetFailure);\n    }\n  }, [retweetFailure]); // useEffect(() => {\n  //   dispatch({ type: LOAD_MY_INFO_REQUEST });\n  //   dispatch({\n  //     type: LOAD_POST_REQUEST,\n  //   });\n  // }, []);\n\n  useEffect(() => {\n    if (inView && !loadPostLoading && hasMorePosts) {\n      var _mainPosts;\n\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_POSTS_REQUEST,\n        lastId\n      });\n    }\n  }, [inView]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Home\"), me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 14\n    }\n  }), mainPosts.map(post => {\n    var _mainPosts2;\n\n    return (// <PostCard post={post} key={post.id} />\n      __jsx(React.Fragment, {\n        key: post.id,\n        style: {\n          padding: \"0\",\n          margin: \"0\",\n          width: \"100%\",\n          height: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, __jsx(PostCard, {\n        post: post,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }), post.id === ((_mainPosts2 = mainPosts[mainPosts.length - 1]) === null || _mainPosts2 === void 0 ? void 0 : _mainPosts2.id) && hasMorePosts ? __jsx(\"div\", {\n        ref: ref,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }\n      }, __jsx(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }\n      })) : \"\")\n    );\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(\"getServerSideProps start\");\n  console.log(context.req.headers);\n  const cookie = context.req ? context.req.headers.cookie : \"\"; // axios.defaults.headers.Cookie = cookie; //서버쪽으로 쿠키전달\n  //위 두 줄만 입력할 경우, 쿠키가 공유되므로 아래 코드를 작성해줘야됨.\n\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  }); //아래 코드는 next redux에서 그렇게 하라고 되어 있음.\n\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희폴더/programming/program/react-web/nextJs-nodeBird/front/pages/index.js"],"names":["React","useEffect","useSelector","useDispatch","AppLayout","Loading","PostCard","PostForm","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","useInView","wrapper","END","axios","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostLoading","retweetFailure","post","ref","inView","threshold","triggerOnce","unobserveOnEnter","delay","trackVisibility","alert","lastId","length","id","type","map","padding","margin","width","height","getServerSideProps","context","console","log","req","headers","cookie","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport Loading from \"../components/Loading\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../constants/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../constants/user\";\nimport { useInView } from \"react-intersection-observer\";\nimport wrapper from \"../store/configureStore\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state) => state.user);\n  const { mainPosts, hasMorePosts, loadPostLoading, retweetFailure } =\n    useSelector((state) => state.post);\n  const [ref, inView] = useInView({\n    threshold: 1,\n    triggerOnce: true,\n    unobserveOnEnter: true,\n    delay: 1000,\n    trackVisibility: true,\n  });\n\n  useEffect(() => {\n    if (retweetFailure) {\n      alert(retweetFailure);\n    }\n  }, [retweetFailure]);\n\n  // useEffect(() => {\n  //   dispatch({ type: LOAD_MY_INFO_REQUEST });\n  //   dispatch({\n  //     type: LOAD_POST_REQUEST,\n  //   });\n  // }, []);\n\n  useEffect(() => {\n    if (inView && !loadPostLoading && hasMorePosts) {\n      const lastId = mainPosts[mainPosts.length - 1]?.id;\n      dispatch({\n        type: LOAD_POSTS_REQUEST,\n        lastId,\n      });\n    }\n  }, [inView]);\n\n  return (\n    <AppLayout>\n      <h3>Home</h3>\n      {me && <PostForm />}\n      {mainPosts.map((post) => (\n        // <PostCard post={post} key={post.id} />\n        <React.Fragment\n          key={post.id}\n          style={{ padding: \"0\", margin: \"0\", width: \"100%\", height: \"100%\" }}\n        >\n          <PostCard post={post} />\n          {post.id === mainPosts[mainPosts.length - 1]?.id && hasMorePosts ? (\n            <div ref={ref}>\n              <Loading />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </React.Fragment>\n      ))}\n    </AppLayout>\n  );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(\n  async (context) => {\n    console.log(\"getServerSideProps start\");\n    console.log(context.req.headers);\n    const cookie = context.req ? context.req.headers.cookie : \"\";\n    // axios.defaults.headers.Cookie = cookie; //서버쪽으로 쿠키전달\n    //위 두 줄만 입력할 경우, 쿠키가 공유되므로 아래 코드를 작성해줘야됨.\n    axios.defaults.headers.Cookie = \"\";\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({ type: LOAD_MY_INFO_REQUEST });\n    context.store.dispatch({\n      type: LOAD_POSTS_REQUEST,\n    });\n\n    //아래 코드는 next redux에서 그렇게 하라고 되어 있음.\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  }\n);\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}