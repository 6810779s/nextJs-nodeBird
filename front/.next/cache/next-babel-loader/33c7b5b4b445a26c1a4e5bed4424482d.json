{"ast":null,"code":"var _jsxFileName = \"/Users/eunheejang/Desktop/\\u110B\\u1173\\u11AB\\u1112\\u1174\\u1111\\u1169\\u11AF\\u1103\\u1165/programming/program/react-web/nextJs-nodeBird/front/components/PostForm.js\";\nvar __jsx = React.createElement;\nimport { Box, Button, Input, TextareaAutosize } from \"@material-ui/core\";\nimport React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from \"../constants/post\";\nimport { addPost } from \"../reducers/post\";\nimport styles from \"../styles/Postform.module.scss\";\nimport InsertPhotoIcon from \"@material-ui/icons/InsertPhoto\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch(); //   const imageInput = useRef();\n\n  const {\n    0: textAreaValue,\n    1: setTextAreaValue\n  } = useState(\"\");\n  const onChangeText = useCallback(e => {\n    setTextAreaValue(e.target.value);\n  }, []);\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (addPostDone) {\n      setTextAreaValue(\"\");\n    }\n  }, [addPostDone]);\n  const imageInput = useRef();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const data = new FormData(e.currentTarget);\n    const text = data.get(\"dailyText\");\n    const formData = new FormData();\n    imagePaths.forEach(i => {\n      formData.append(\"image\", i);\n    });\n    formData.append(\"content\", text);\n\n    if (data.get(\"dailyText\") !== \"\") {\n      return dispatch({\n        type: ADD_POST_REQUEST,\n        data: formData\n      });\n    }\n  };\n\n  const onChangeImage = useCallback(e => {\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  });\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  });\n  return __jsx(Box, {\n    component: \"form\",\n    noValidate: true,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(\"textarea\", {\n    className: styles.textAreaStyle,\n    name: \"dailyText\",\n    id: \"dailyText\",\n    \"aria-label\": \"minimum height\",\n    value: textAreaValue,\n    onChange: onChangeText,\n    minRows: 5,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: styles.buttonStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    ref: imageInput,\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    onChange: onChangeImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    className: styles.insertImgBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, __jsx(InsertPhotoIcon, {\n    className: styles.insertImgIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }))), __jsx(Button, {\n    type: \"submit\",\n    className: styles.addPostBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"\\uAC8C\\uC2DC\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, imagePaths.map((v, i) => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: \"inline-block\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${v}`,\n    style: {\n      width: \"200px\"\n    },\n    alt: v,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: onRemoveImage(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, \"\\uC81C\\uAC70\"))))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희폴더/programming/program/react-web/nextJs-nodeBird/front/components/PostForm.js"],"names":["Box","Button","Input","TextareaAutosize","React","useCallback","useState","useEffect","useRef","useDispatch","useSelector","ADD_POST_REQUEST","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","addPost","styles","InsertPhotoIcon","PostForm","dispatch","textAreaValue","setTextAreaValue","onChangeText","e","target","value","imagePaths","addPostDone","state","post","imageInput","handleSubmit","preventDefault","data","FormData","currentTarget","text","get","formData","forEach","i","append","type","onChangeImage","imageFormData","call","files","f","onClickImageUpload","current","click","onRemoveImage","index","textAreaStyle","buttonStyle","insertImgBtn","insertImgIcon","addPostBtn","map","v","display","width"],"mappings":"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","sourcesContent":["import { Box, Button, Input, TextareaAutosize } from \"@material-ui/core\";\nimport React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  ADD_POST_REQUEST,\n  REMOVE_IMAGE,\n  UPLOAD_IMAGES_REQUEST,\n} from \"../constants/post\";\nimport { addPost } from \"../reducers/post\";\nimport styles from \"../styles/Postform.module.scss\";\nimport InsertPhotoIcon from \"@material-ui/icons/InsertPhoto\";\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  //   const imageInput = useRef();\n  const [textAreaValue, setTextAreaValue] = useState(\"\");\n  const onChangeText = useCallback((e) => {\n    setTextAreaValue(e.target.value);\n  }, []);\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\n\n  useEffect(() => {\n    if (addPostDone) {\n      setTextAreaValue(\"\");\n    }\n  }, [addPostDone]);\n  const imageInput = useRef();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const data = new FormData(e.currentTarget);\n    const text = data.get(\"dailyText\");\n    const formData = new FormData();\n    imagePaths.forEach((i) => {\n      formData.append(\"image\", i);\n    });\n    formData.append(\"content\", text);\n    if (data.get(\"dailyText\") !== \"\") {\n      return dispatch({ type: ADD_POST_REQUEST, data: formData });\n    }\n  };\n\n  const onChangeImage = useCallback((e) => {\n    const imageFormData = new FormData();\n\n    [].forEach.call(e.target.files, (f) => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({ type: UPLOAD_IMAGES_REQUEST, data: imageFormData });\n  });\n\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n\n  const onRemoveImage = useCallback((index) => () => {\n    dispatch({ type: REMOVE_IMAGE, data: index });\n  });\n\n  return (\n    <Box component=\"form\" noValidate onSubmit={handleSubmit}>\n      <textarea\n        className={styles.textAreaStyle}\n        name=\"dailyText\"\n        id=\"dailyText\"\n        aria-label=\"minimum height\"\n        value={textAreaValue}\n        onChange={onChangeText}\n        minRows={5}\n        placeholder=\"어떤 신기한 일이 있었나요?\"\n        autoFocus\n      />\n      {/* <Input accept=\"image/*\" multiple type=\"file\" /> */}\n      <div className={styles.buttonStyle}>\n        <div>\n          <input\n            type=\"file\"\n            ref={imageInput}\n            name=\"image\"\n            multiple\n            hidden\n            onChange={onChangeImage}\n          />\n          <Button onClick={onClickImageUpload} className={styles.insertImgBtn}>\n            <InsertPhotoIcon className={styles.insertImgIcon} />\n          </Button>\n        </div>\n        <Button type=\"submit\" className={styles.addPostBtn}>\n          게시\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((v, i) => (\n          <div key={v} style={{ display: \"inline-block\" }}>\n            <img\n              src={`http://localhost:3065/${v}`}\n              style={{ width: \"200px\" }}\n              alt={v}\n            />\n            <div>\n              <Button onClick={onRemoveImage(i)}>제거</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Box>\n  );\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}