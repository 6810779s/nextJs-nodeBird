{"ast":null,"code":"import { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, ADD_POST_TO_ME, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LIKE_BUTTON_REQUEST, LIKE_BUTTON_SUCCESS, LIKE_BUTTON_FAILURE, UNLIKE_BUTTON_REQUEST, UNLIKE_BUTTON_SUCCESS, UNLIKE_BUTTON_FAILURE } from \"../constants/post\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`api/post`, data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentsAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComments(action) {\n  try {\n    const result = yield call(addCommentsAPI, action.data);\n    yield put({\n      type: ADD_COMMENTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_COMMENTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/posts`, data);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likeButtonAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likeButton(action) {\n  try {\n    const result = yield call(likeButtonAPI, action.data);\n    console.log(); //result에 postid와 userid가 들어가 있음\n\n    yield put({\n      type: LIKE_BUTTON_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(\"likeerror\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LIKE_BUTTON_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikeButtonAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikeButton(action) {\n  try {\n    const result = yield call(unlikeButtonAPI, action.data);\n    yield put({\n      type: UNLIKE_BUTTON_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: UNLIKE_BUTTON_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* warchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComments() {\n  yield takeLatest(ADD_COMMENTS_REQUEST, addComments);\n}\n\nfunction* warchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikeButton() {\n  yield takeLatest(LIKE_BUTTON_REQUEST, likeButton);\n}\n\nfunction* watchUnlikeButton() {\n  yield takeLatest(UNLIKE_BUTTON_REQUEST, unlikeButton);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComments), fork(warchRemovePost), fork(warchLoadPost), fork(watchLikeButton), fork(watchUnlikeButton)]);\n}","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/sagas/post.js"],"names":["LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_BUTTON_REQUEST","LIKE_BUTTON_SUCCESS","LIKE_BUTTON_FAILURE","UNLIKE_BUTTON_REQUEST","UNLIKE_BUTTON_SUCCESS","UNLIKE_BUTTON_FAILURE","all","fork","put","takeLatest","delay","call","axios","addPostAPI","data","post","content","addPost","action","result","type","id","err","error","response","removePostAPI","delete","removePost","console","addCommentsAPI","postId","addComments","loadPostAPI","get","loadPost","likeButtonAPI","patch","likeButton","log","unlikeButtonAPI","unlikeButton","watchAddPost","warchRemovePost","watchAddComments","warchLoadPost","watchLikeButton","watchUnlikeButton","postSaga"],"mappings":"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","sourcesContent":["import {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  ADD_POST_TO_ME,\n  REMOVE_POST_OF_ME,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LIKE_BUTTON_REQUEST,\n  LIKE_BUTTON_SUCCESS,\n  LIKE_BUTTON_FAILURE,\n  UNLIKE_BUTTON_REQUEST,\n  UNLIKE_BUTTON_SUCCESS,\n  UNLIKE_BUTTON_FAILURE,\n} from \"../constants/post\";\nimport { all, fork, put, takeLatest, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`api/post`, data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(\"err:\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentsAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComments(action) {\n  try {\n    const result = yield call(addCommentsAPI, action.data);\n    yield put({\n      type: ADD_COMMENTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: ADD_COMMENTS_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/posts`, data);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction likeButtonAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likeButton(action) {\n  try {\n    const result = yield call(likeButtonAPI, action.data);\n    console.log()\n    //result에 postid와 userid가 들어가 있음\n    yield put({\n      type: LIKE_BUTTON_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(\"likeerror\", err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: LIKE_BUTTON_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unlikeButtonAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikeButton(action) {\n  try {\n    const result = yield call(unlikeButtonAPI, action.data);\n    yield put({\n      type: UNLIKE_BUTTON_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      //put은 액션 dispatch와 비슷한것\n      type: UNLIKE_BUTTON_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* warchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComments() {\n  yield takeLatest(ADD_COMMENTS_REQUEST, addComments);\n}\n\nfunction* warchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikeButton() {\n  yield takeLatest(LIKE_BUTTON_REQUEST, likeButton);\n}\n\nfunction* watchUnlikeButton() {\n  yield takeLatest(UNLIKE_BUTTON_REQUEST, unlikeButton);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComments),\n    fork(warchRemovePost),\n    fork(warchLoadPost),\n    fork(watchLikeButton),\n    fork(watchUnlikeButton),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}