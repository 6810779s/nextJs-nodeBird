{"ast":null,"code":"// import shortId from \"shortid\";\nimport { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LIKE_BUTTON_REQUEST, LIKE_BUTTON_SUCCESS, LIKE_BUTTON_FAILURE, UNLIKE_BUTTON_REQUEST, UNLIKE_BUTTON_SUCCESS, UNLIKE_BUTTON_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, REMOVE_IMAGE } from \"../constants/post\";\nimport produce from \"immer\"; // import faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n  likeButtonLoading: false,\n  likeButtonDone: false,\n  likeButtonFailure: null,\n  unlikeButtonLoading: false,\n  unlikeButtonDone: false,\n  unlikeButtonFailure: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesFailure: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetFailure: null\n}; // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComments = data => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetFailure = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetFailure = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesFailure = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesFailure = action.error;\n        break;\n\n      case LIKE_BUTTON_REQUEST:\n        draft.likeButtonLoading = true;\n        draft.likeButtonDone = false;\n        draft.likeButtonFailure = null;\n        break;\n\n      case LIKE_BUTTON_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likeButtonLoading = false;\n          draft.likeButtonDone = true;\n          break;\n        }\n\n      case LIKE_BUTTON_FAILURE:\n        draft.likeButtonLoading = false;\n        draft.likeButtonFailure = action.error;\n        break;\n\n      case UNLIKE_BUTTON_REQUEST:\n        draft.unlikeButtonLoading = true;\n        draft.unlikeButtonDone = false;\n        draft.unlikeButtonFailure = null;\n        break;\n\n      case UNLIKE_BUTTON_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikeButtonLoading = false;\n          draft.unlikeButtonDone = true;\n          break;\n        }\n\n      case UNLIKE_BUTTON_FAILURE:\n        draft.unlikeButtonLoading = false;\n        draft.unlikeButtonFailure = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/reducers/post.js"],"names":["LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_BUTTON_REQUEST","LIKE_BUTTON_SUCCESS","LIKE_BUTTON_FAILURE","UNLIKE_BUTTON_REQUEST","UNLIKE_BUTTON_SUCCESS","UNLIKE_BUTTON_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostLoading","loadPostDone","loadPostFailure","addPostLoading","addPostDone","addPostFailure","removePostLoading","removePostDone","removePostFailure","addCommentsLoading","addCommentsDone","addCommentsFailure","likeButtonLoading","likeButtonDone","likeButtonFailure","unlikeButtonLoading","unlikeButtonDone","unlikeButtonFailure","uploadImagesLoading","uploadImagesDone","uploadImagesFailure","retweetLoading","retweetDone","retweetFailure","addPost","data","type","addComments","rootReducer","state","action","draft","filter","v","i","unshift","error","post","find","id","PostId","Likers","push","UserId","Comments","removePostLoadin"],"mappings":"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","sourcesContent":["// import shortId from \"shortid\";\nimport {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LIKE_BUTTON_REQUEST,\n  LIKE_BUTTON_SUCCESS,\n  LIKE_BUTTON_FAILURE,\n  UNLIKE_BUTTON_REQUEST,\n  UNLIKE_BUTTON_SUCCESS,\n  UNLIKE_BUTTON_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  RETWEET_REQUEST,\n  RETWEET_SUCCESS,\n  RETWEET_FAILURE,\n  REMOVE_IMAGE,\n} from \"../constants/post\";\nimport produce from \"immer\";\n// import faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n  likeButtonLoading: false,\n  likeButtonDone: false,\n  likeButtonFailure: null,\n  unlikeButtonLoading: false,\n  unlikeButtonDone: false,\n  unlikeButtonFailure: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesFailure: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetFailure: null,\n};\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\n\nexport const addComments = (data) => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data,\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetFailure = null;\n        break;\n      case RETWEET_SUCCESS: {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetFailure = action.error;\n        break;\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesFailure = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS: {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesFailure = action.error;\n        break;\n      case LIKE_BUTTON_REQUEST:\n        draft.likeButtonLoading = true;\n        draft.likeButtonDone = false;\n        draft.likeButtonFailure = null;\n        break;\n      case LIKE_BUTTON_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers.push({ id: action.data.UserId });\n        draft.likeButtonLoading = false;\n        draft.likeButtonDone = true;\n        break;\n      }\n      case LIKE_BUTTON_FAILURE:\n        draft.likeButtonLoading = false;\n        draft.likeButtonFailure = action.error;\n        break;\n\n      case UNLIKE_BUTTON_REQUEST:\n        draft.unlikeButtonLoading = true;\n        draft.unlikeButtonDone = false;\n        draft.unlikeButtonFailure = null;\n        break;\n      case UNLIKE_BUTTON_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n        draft.unlikeButtonLoading = false;\n        draft.unlikeButtonDone = true;\n        break;\n      }\n      case UNLIKE_BUTTON_FAILURE:\n        draft.unlikeButtonLoading = false;\n        draft.unlikeButtonFailure = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(\n          (v) => v.id !== action.data.PostId\n        );\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}