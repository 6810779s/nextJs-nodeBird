{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _initialState;\n\n// import shortId from \"shortid\";\nimport { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LIKE_BUTTON_REQUEST, LIKE_BUTTON_SUCCESS, LIKE_BUTTON_FAILURE } from \"../constants/post\";\nimport produce from \"immer\"; // import faker from \"faker\";\n\nexport var initialState = (_initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null\n}, _defineProperty(_initialState, \"addCommentsLoading\", false), _defineProperty(_initialState, \"addCommentsDone\", false), _defineProperty(_initialState, \"addCommentsFailure\", null), _initialState); // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComments = function addComments(data) {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data: data\n  };\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 10;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n\n      case ADD_COMMENTS_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        });\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/reducers/post.js"],"names":["LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_BUTTON_REQUEST","LIKE_BUTTON_SUCCESS","LIKE_BUTTON_FAILURE","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostLoading","loadPostDone","loadPostFailure","addPostLoading","addPostDone","addPostFailure","removePostLoading","removePostDone","removePostFailure","addCommentsLoading","addCommentsDone","addCommentsFailure","addPost","data","type","addComments","rootReducer","state","action","draft","concat","length","error","unshift","post","find","v","id","PostId","Comments","filter","removePostLoadin"],"mappings":"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","sourcesContent":["// import shortId from \"shortid\";\nimport {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LIKE_BUTTON_REQUEST,\n  LIKE_BUTTON_SUCCESS,\n  LIKE_BUTTON_FAILURE,\n} from \"../constants/post\";\nimport produce from \"immer\";\n// import faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n};\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\n\nexport const addComments = (data) => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data,\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 10;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}