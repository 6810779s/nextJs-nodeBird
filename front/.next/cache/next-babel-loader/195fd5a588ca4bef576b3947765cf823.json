{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/eunheejang/Desktop/\\u110B\\u1173\\u11AB\\u1112\\u1174\\u1111\\u1169\\u11AF\\u1103\\u1165/programming/program/react-web/nextJs-nodeBird/front/components/CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Box, Button, Input } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { ADD_COMMENTS_REQUEST } from \"../constants/post\";\nimport styles from \"../styles/CommentForm.module.scss\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useState = useState(\"\"),\n      comment = _useState[0],\n      setComment = _useState[1];\n\n  var commentText = useRef(null);\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentsDone = _useSelector.addCommentsDone;\n\n  useEffect(function () {\n    if (addCommentsDone) {\n      setComment(\"\");\n    }\n  }, [addCommentsDone]);\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    var data = new FormData(e.currentTarget);\n\n    if (data.get(\"commentInput\")) {\n      dispatch({\n        type: ADD_COMMENTS_REQUEST,\n        data: {\n          content: data.get(\"commentInput\"),\n          postId: post.id,\n          userId: id\n        }\n      });\n    }\n  };\n\n  var onChangeComment = function onChangeComment(e) {\n    setComment(e.target.value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    component: \"form\",\n    noValidate: true,\n    onSubmit: handleSubmit,\n    className: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    style: {\n      flex: 1\n    },\n    id: \"commentInput\",\n    name: \"commentInput\",\n    value: comment,\n    onChange: onChangeComment,\n    placeholder: \"\\uB313\\uAE00 \\uB2EC\\uAE30...\",\n    type: \"text\",\n    ref: commentText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    className: styles.addCommentBtn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"\\uAC8C\\uC2DC\")));\n};\n\n_s(CommentForm, \"N42ycAgVguCQfKx2sRJ18ngfmG0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희폴더/programming/program/react-web/nextJs-nodeBird/front/components/CommentForm.js"],"names":["React","useRef","useState","useEffect","Box","Button","Input","useDispatch","useSelector","PropTypes","ADD_COMMENTS_REQUEST","styles","CommentForm","post","dispatch","comment","setComment","commentText","id","state","user","me","addCommentsDone","handleSubmit","e","preventDefault","data","FormData","currentTarget","get","type","content","postId","userId","onChangeComment","target","value","container","flex","addCommentBtn","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { Box, Button, Input } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { ADD_COMMENTS_REQUEST } from \"../constants/post\";\nimport styles from \"../styles/CommentForm.module.scss\";\n\nconst CommentForm = ({ post }) => {\n  const dispatch = useDispatch();\n  const [comment, setComment] = useState(\"\");\n  const commentText = useRef(null);\n  const id = useSelector((state) => state.user.me?.id);\n  const { addCommentsDone } = useSelector((state) => state.post);\n  useEffect(() => {\n    if (addCommentsDone) {\n      setComment(\"\");\n    }\n  }, [addCommentsDone]);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const data = new FormData(e.currentTarget);\n\n    if (data.get(\"commentInput\")) {\n      dispatch({\n        type: ADD_COMMENTS_REQUEST,\n        data: {\n          content: data.get(\"commentInput\"),\n          postId: post.id,\n          userId: id,\n        },\n      });\n    }\n  };\n  const onChangeComment = (e) => {\n    setComment(e.target.value);\n  };\n  return (\n    <>\n      <Box\n        component=\"form\"\n        noValidate\n        onSubmit={handleSubmit}\n        className={styles.container}\n      >\n        <Input\n          style={{ flex: 1 }}\n          id=\"commentInput\"\n          name=\"commentInput\"\n          value={comment}\n          onChange={onChangeComment}\n          placeholder=\"댓글 달기...\"\n          type=\"text\"\n          ref={commentText}\n        />\n        <Button type=\"submit\" className={styles.addCommentBtn}>\n          게시\n        </Button>\n      </Box>\n    </>\n  );\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}