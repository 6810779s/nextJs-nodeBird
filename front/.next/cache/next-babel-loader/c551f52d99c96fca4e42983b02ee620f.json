{"ast":null,"code":"// import shortId from \"shortid\";\nimport { LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENTS_REQUEST, ADD_COMMENTS_SUCCESS, ADD_COMMENTS_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LIKE_BUTTON_REQUEST, LIKE_BUTTON_SUCCESS, LIKE_BUTTON_FAILURE } from \"../constants/post\";\nimport produce from \"immer\"; // import faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n  likeButtonLoading: false,\n  likeButtonDone: false,\n  likeButtonFailure: null\n}; // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComments = data => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LIKE_BUTTON_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 10;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 10;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/eunheejang/Desktop/은희/programming/program/nextJs-nodeBird/front/reducers/post.js"],"names":["LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENTS_REQUEST","ADD_COMMENTS_SUCCESS","ADD_COMMENTS_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_BUTTON_REQUEST","LIKE_BUTTON_SUCCESS","LIKE_BUTTON_FAILURE","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostLoading","loadPostDone","loadPostFailure","addPostLoading","addPostDone","addPostFailure","removePostLoading","removePostDone","removePostFailure","addCommentsLoading","addCommentsDone","addCommentsFailure","likeButtonLoading","likeButtonDone","likeButtonFailure","addPost","data","type","addComments","rootReducer","state","action","draft","concat","length","error","unshift","post","find","v","id","PostId","Comments","filter","removePostLoadin"],"mappings":"AAAA;AACA,SACEA,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,oBAPF,EAQEC,oBARF,EASEC,oBATF,EAUEC,mBAVF,EAWEC,mBAXF,EAYEC,mBAZF,EAaEC,mBAbF,EAcEC,mBAdF,EAeEC,mBAfF,QAgBO,mBAhBP;AAiBA,OAAOC,OAAP,MAAoB,OAApB,C,CACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE,EAFc;AAG1BC,EAAAA,YAAY,EAAE,IAHY;AAI1BC,EAAAA,eAAe,EAAE,KAJS;AAK1BC,EAAAA,YAAY,EAAE,KALY;AAM1BC,EAAAA,eAAe,EAAE,IANS;AAO1BC,EAAAA,cAAc,EAAE,KAPU;AAQ1BC,EAAAA,WAAW,EAAE,KARa;AAS1BC,EAAAA,cAAc,EAAE,IATU;AAU1BC,EAAAA,iBAAiB,EAAE,KAVO;AAW1BC,EAAAA,cAAc,EAAE,KAXU;AAY1BC,EAAAA,iBAAiB,EAAE,IAZO;AAa1BC,EAAAA,kBAAkB,EAAE,KAbM;AAc1BC,EAAAA,eAAe,EAAE,KAdS;AAe1BC,EAAAA,kBAAkB,EAAE,IAfM;AAgB1BC,EAAAA,iBAAiB,EAAE,KAhBO;AAiB1BC,EAAAA,cAAc,EAAE,KAjBU;AAkB1BC,EAAAA,iBAAiB,EAAE;AAlBO,CAArB,C,CAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAElC,gBADD;AAELiC,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,WAAW,GAAIF,IAAD,IAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAE/B,oBADD;AAEL8B,IAAAA;AAFK,GAAP;AAID,CALM;;AAOP,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGxB,YAAT,EAAuByB,MAAvB,KAAkC;AACpD,SAAO1B,OAAO,CAACyB,KAAD,EAASE,KAAD,IAAW;AAC/B,YAAQD,MAAM,CAACJ,IAAf;AACE,WAAKzB,mBAAL;AACE8B,QAAAA,KAAK,CAACtB,eAAN,GAAwB,IAAxB;AACAsB,QAAAA,KAAK,CAACrB,YAAN,GAAqB,KAArB;AACAqB,QAAAA,KAAK,CAACpB,eAAN,GAAwB,IAAxB;AACA;;AACF,WAAKrB,iBAAL;AACEyC,QAAAA,KAAK,CAACzB,SAAN,GAAkByB,KAAK,CAACzB,SAAN,CAAgB0B,MAAhB,CAAuBF,MAAM,CAACL,IAA9B,CAAlB;AACAM,QAAAA,KAAK,CAACtB,eAAN,GAAwB,KAAxB;AACAsB,QAAAA,KAAK,CAACrB,YAAN,GAAqB,IAArB;AACAqB,QAAAA,KAAK,CAACvB,YAAN,GAAqBuB,KAAK,CAACzB,SAAN,CAAgB2B,MAAhB,GAAyB,EAA9C;AACA;;AACF,WAAK1C,iBAAL;AACEwC,QAAAA,KAAK,CAACtB,eAAN,GAAwB,KAAxB;AACAsB,QAAAA,KAAK,CAACpB,eAAN,GAAwBmB,MAAM,CAACI,KAA/B;AACA;;AACF,WAAK7C,iBAAL;AACE0C,QAAAA,KAAK,CAACtB,eAAN,GAAwB,IAAxB;AACAsB,QAAAA,KAAK,CAACrB,YAAN,GAAqB,KAArB;AACAqB,QAAAA,KAAK,CAACpB,eAAN,GAAwB,IAAxB;AACA;;AACF,WAAKrB,iBAAL;AACEyC,QAAAA,KAAK,CAACzB,SAAN,GAAkByB,KAAK,CAACzB,SAAN,CAAgB0B,MAAhB,CAAuBF,MAAM,CAACL,IAA9B,CAAlB;AACAM,QAAAA,KAAK,CAACtB,eAAN,GAAwB,KAAxB;AACAsB,QAAAA,KAAK,CAACrB,YAAN,GAAqB,IAArB;AACAqB,QAAAA,KAAK,CAACvB,YAAN,GAAqBuB,KAAK,CAACzB,SAAN,CAAgB2B,MAAhB,GAAyB,EAA9C;AACA;;AACF,WAAK1C,iBAAL;AACEwC,QAAAA,KAAK,CAACtB,eAAN,GAAwB,KAAxB;AACAsB,QAAAA,KAAK,CAACpB,eAAN,GAAwBmB,MAAM,CAACI,KAA/B;AACA;;AACF,WAAK1C,gBAAL;AACEuC,QAAAA,KAAK,CAACnB,cAAN,GAAuB,IAAvB;AACAmB,QAAAA,KAAK,CAAClB,WAAN,GAAoB,KAApB;AACAkB,QAAAA,KAAK,CAACjB,cAAN,GAAuB,IAAvB;AACA;;AACF,WAAKrB,gBAAL;AACEsC,QAAAA,KAAK,CAACzB,SAAN,CAAgB6B,OAAhB,CAAwBL,MAAM,CAACL,IAA/B;AACAM,QAAAA,KAAK,CAACnB,cAAN,GAAuB,KAAvB;AACAmB,QAAAA,KAAK,CAAClB,WAAN,GAAoB,IAApB;AACA;;AACF,WAAKnB,gBAAL;AACEqC,QAAAA,KAAK,CAACnB,cAAN,GAAuB,KAAvB;AACAmB,QAAAA,KAAK,CAACjB,cAAN,GAAuBgB,MAAM,CAACI,KAA9B;AACA;;AACF,WAAKvC,oBAAL;AACEoC,QAAAA,KAAK,CAACb,kBAAN,GAA2B,IAA3B;AACAa,QAAAA,KAAK,CAACZ,eAAN,GAAwB,KAAxB;AACAY,QAAAA,KAAK,CAACX,kBAAN,GAA2B,IAA3B;AACA;;AACF,WAAKxB,oBAAL;AACE,cAAMwC,IAAI,GAAGL,KAAK,CAACzB,SAAN,CAAgB+B,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYe,MAAjD,CAAb;AACAJ,QAAAA,IAAI,CAACK,QAAL,CAAcN,OAAd,CAAsBL,MAAM,CAACL,IAA7B;AACAM,QAAAA,KAAK,CAACb,kBAAN,GAA2B,KAA3B;AACAa,QAAAA,KAAK,CAACZ,eAAN,GAAwB,IAAxB;AACA;;AAEF,WAAKtB,oBAAL;AACEkC,QAAAA,KAAK,CAACb,kBAAN,GAA2B,KAA3B;AACAa,QAAAA,KAAK,CAACX,kBAAN,GAA2BU,MAAM,CAACI,KAAlC;AACA;;AACF,WAAKpC,mBAAL;AACEiC,QAAAA,KAAK,CAAChB,iBAAN,GAA0B,IAA1B;AACAgB,QAAAA,KAAK,CAACf,cAAN,GAAuB,KAAvB;AACAe,QAAAA,KAAK,CAACd,iBAAN,GAA0B,IAA1B;AACA;;AACF,WAAKlB,mBAAL;AACEgC,QAAAA,KAAK,CAACzB,SAAN,GAAkByB,KAAK,CAACzB,SAAN,CAAgBoC,MAAhB,CAAwBJ,CAAD,IAAOA,CAAC,CAACC,EAAF,KAAST,MAAM,CAACL,IAA9C,CAAlB;AACAM,QAAAA,KAAK,CAAChB,iBAAN,GAA0B,KAA1B;AACAgB,QAAAA,KAAK,CAACf,cAAN,GAAuB,IAAvB;AACA;;AACF,WAAKhB,mBAAL;AACE+B,QAAAA,KAAK,CAACY,gBAAN,GAAyB,KAAzB;AACAZ,QAAAA,KAAK,CAACd,iBAAN,GAA0Ba,MAAM,CAACI,KAAjC;AACA;;AAEF;AACE;AA7EJ;AA+ED,GAhFa,CAAd;AAiFD,CAlFD;;AAoFA,eAAeN,WAAf","sourcesContent":["// import shortId from \"shortid\";\nimport {\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENTS_REQUEST,\n  ADD_COMMENTS_SUCCESS,\n  ADD_COMMENTS_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LIKE_BUTTON_REQUEST,\n  LIKE_BUTTON_SUCCESS,\n  LIKE_BUTTON_FAILURE,\n} from \"../constants/post\";\nimport produce from \"immer\";\n// import faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostFailure: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostFailure: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostFailure: null,\n  addCommentsLoading: false,\n  addCommentsDone: false,\n  addCommentsFailure: null,\n  likeButtonLoading: false,\n  likeButtonDone: false,\n  likeButtonFailure: null,\n};\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [{ src: \"https://picsum.photos/200/300\" }],\n//       Comments: [\n//         {\n//           id: shortId.generate(),\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\n\nexport const addComments = (data) => {\n  return {\n    type: ADD_COMMENTS_REQUEST,\n    data,\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LIKE_BUTTON_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 10;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostFailure = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 10;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostFailure = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostFailure = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostFailure = action.error;\n        break;\n      case ADD_COMMENTS_REQUEST:\n        draft.addCommentsLoading = true;\n        draft.addCommentsDone = false;\n        draft.addCommentsFailure = null;\n        break;\n      case ADD_COMMENTS_SUCCESS:\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentsLoading = false;\n        draft.addCommentsDone = true;\n        break;\n\n      case ADD_COMMENTS_FAILURE:\n        draft.addCommentsLoading = false;\n        draft.addCommentsFailure = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostFailure = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoadin = false;\n        draft.removePostFailure = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}