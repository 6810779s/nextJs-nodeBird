{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport Loading from \"../components/Loading\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../constants/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../constants/user\";\nimport { useInView } from \"react-intersection-observer\";\nimport wrapper from \"../store/configureStore\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostLoading,\n    retweetFailure\n  } = useSelector(state => state.post);\n  const [ref, inView] = useInView({\n    threshold: 1,\n    triggerOnce: true,\n    unobserveOnEnter: true,\n    delay: 1000,\n    trackVisibility: true\n  });\n  useEffect(() => {\n    if (retweetFailure) {\n      alert(retweetFailure);\n    }\n  }, [retweetFailure]); // useEffect(() => {\n  //   dispatch({ type: LOAD_MY_INFO_REQUEST });\n  //   dispatch({\n  //     type: LOAD_POST_REQUEST,\n  //   });\n  // }, []);\n\n  useEffect(() => {\n    if (inView && !loadPostLoading && hasMorePosts) {\n      var _mainPosts;\n\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_POSTS_REQUEST,\n        lastId\n      });\n    }\n  }, [inView]);\n  return __jsx(AppLayout, null, me && __jsx(PostForm, null), mainPosts.map(post => {\n    var _mainPosts2;\n\n    return (// <PostCard post={post} key={post.id} />\n      __jsx(React.Fragment, {\n        key: post.id\n      }, __jsx(PostCard, {\n        post: post\n      }), post.id === ((_mainPosts2 = mainPosts[mainPosts.length - 1]) === null || _mainPosts2 === void 0 ? void 0 : _mainPosts2.id) && hasMorePosts ? __jsx(\"div\", {\n        ref: ref\n      }, __jsx(Loading, null)) : \"\")\n    );\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(\"getServerSideProps start\");\n  console.log(context.req.headers);\n  const cookie = context.req ? context.req.headers.cookie : \"\"; // axios.defaults.headers.Cookie = cookie; //서버쪽으로 쿠키전달\n  //위 두 줄만 입력할 경우, 쿠키가 공유되므로 아래 코드를 작성해줘야됨.\n\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  }); //아래 코드는 next redux에서 그렇게 하라고 되어 있음.\n\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}